                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f43807000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6b804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7b002000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 	# the %rax is initially 0, so delete xor %rax, %rax
0x032: 704501000000000000   | 	jmp Test1		# goto Test1:
                            | 
                            | # 6x1unrolling
0x03b: 50870000000000000000 | Loop1:	mrmovq (%rdi), %r8	# read val from src...
0x045: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x04f: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# ...and store it to dst
0x059: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x063: 6288                 | 	andq %r8, %r8		# val <= 0?
0x065: 717800000000000000   | 	jle Loop2		# if so, goto Loop1:
0x06e: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x078: 6299                 | Loop2:	andq %r9, %r9
0x07a: 718d00000000000000   | 	jle Loop3
0x083: c0f00100000000000000 | 	iaddq $1, %rax
0x08d: 50871000000000000000 | Loop3:	mrmovq 16(%rdi), %r8
0x097: 50971800000000000000 | 	mrmovq 24(%rdi), %r9
0x0a1: 40861000000000000000 | 	rmmovq %r8, 16(%rsi)
0x0ab: 40961800000000000000 | 	rmmovq %r9, 24(%rsi)
0x0b5: 6288                 | 	andq %r8, %r8
0x0b7: 71ca00000000000000   | 	jle Loop4
0x0c0: c0f00100000000000000 | 	iaddq $1, %rax
0x0ca: 6299                 | Loop4:	andq %r9, %r9
0x0cc: 71df00000000000000   | 	jle Loop5
0x0d5: c0f00100000000000000 | 	iaddq $1, %rax
0x0df: 50872000000000000000 | Loop5:	mrmovq 32(%rdi), %r8
0x0e9: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x0f3: 40862000000000000000 | 	rmmovq %r8, 32(%rsi)
0x0fd: 40962800000000000000 | 	rmmovq %r9, 40(%rsi)
0x107: 6288                 | 	andq %r8, %r8
0x109: 711c01000000000000   | 	jle Loop6
0x112: c0f00100000000000000 | 	iaddq $1, %rax
0x11c: c0f73000000000000000 | Loop6:	iaddq $48, %rdi
0x126: c0f63000000000000000 | 	iaddq $48, %rsi
0x130: 6299                 | 	andq %r9, %r9
0x132: 714501000000000000   | 	jle Test1
0x13b: c0f00100000000000000 | 	iaddq $1, %rax
                            | # deal with the left, 3x1unrolling
0x145: c0f2faffffffffffffff | Test1:	iaddq $-6, %rdx
0x14f: 753b00000000000000   | 	jge Loop1
0x158: c0f20600000000000000 |     iaddq $6, %rdx
0x162: 70fa01000000000000   |     jmp Test2	
0x16b: 50870000000000000000 | Left1:	mrmovq (%rdi), %r8
0x175: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x17f: 40860000000000000000 |     rmmovq %r8, (%rsi)
0x189: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x193: 6288                 |     andq %r8, %r8
0x195: 71a801000000000000   |     jle Left2
0x19e: c0f00100000000000000 |     iaddq $1, %rax
0x1a8: 6299                 | Left2:andq %r9, %r9
0x1aa: 71bd01000000000000   |     jle Left3
0x1b3: c0f00100000000000000 |     iaddq $1, %rax
0x1bd: 50871000000000000000 | Left3:	mrmovq 16(%rdi), %r8
0x1c7: c0f71800000000000000 | 	iaddq $24, %rdi
0x1d1: 40861000000000000000 |     rmmovq %r8, 16(%rsi)
0x1db: c0f61800000000000000 | 	iaddq $24, %rsi
0x1e5: 6288                 |     andq %r8, %r8
0x1e7: 71fa01000000000000   |     jle Test2
0x1f0: c0f00100000000000000 |     iaddq $1, %rax
                            | # deal with the remain of the left
0x1fa: c0f2fdffffffffffffff | Test2:  iaddq $-3, %rdx
0x204: 756b01000000000000   |     jge Left1
0x20d: c0f20200000000000000 | 	iaddq $2, %rdx
0x217: 72ad02000000000000   | 	jl Done				# len - 1 < 0, done
0x220: 738402000000000000   | 	je Remain1			# len - 1 = 0, 1 remain
0x229: 50870000000000000000 | 	mrmovq (%rdi), %r8	# else 2 remain
0x233: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x23d: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x247: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x251: 6288                 | 	andq %r8, %r8
0x253: 716602000000000000   | 	jle Remain2
0x25c: c0f00100000000000000 | 	iaddq $1, %rax
0x266: 6299                 | Remain2:andq %r9, %r9
0x268: 71ad02000000000000   | 	jle Done
0x271: c0f00100000000000000 | 	iaddq $1, %rax
0x27b: 70ad02000000000000   | 	jmp Done
0x284: 50870000000000000000 | Remain1:mrmovq (%rdi), %r8
0x28e: 6288                 | 	andq %r8, %r8
0x290: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x29a: 71ad02000000000000   | 	jle Done 
0x2a3: c0f00100000000000000 | 	iaddq $1, %rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x2ad:                      | Done:
0x2ad: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x2ae:                      | End:
                            | #/* $end ncopy-ys */
0x2ae:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x2b0:                      | 	.align 8
0x2b0:                      | src:
0x2b0: ffffffffffffffff     | 	.quad -1
0x2b8: 0200000000000000     | 	.quad 2
0x2c0: 0300000000000000     | 	.quad 3
0x2c8: 0400000000000000     | 	.quad 4
0x2d0: fbffffffffffffff     | 	.quad -5
0x2d8: 0600000000000000     | 	.quad 6
0x2e0: 0700000000000000     | 	.quad 7
0x2e8: f8ffffffffffffff     | 	.quad -8
0x2f0: f7ffffffffffffff     | 	.quad -9
0x2f8: 0a00000000000000     | 	.quad 10
0x300: f5ffffffffffffff     | 	.quad -11
0x308: f4ffffffffffffff     | 	.quad -12
0x310: f3ffffffffffffff     | 	.quad -13
0x318: f2ffffffffffffff     | 	.quad -14
0x320: 0f00000000000000     | 	.quad 15
0x328: f0ffffffffffffff     | 	.quad -16
0x330: efffffffffffffff     | 	.quad -17
0x338: 1200000000000000     | 	.quad 18
0x340: edffffffffffffff     | 	.quad -19
0x348: ecffffffffffffff     | 	.quad -20
0x350: 1500000000000000     | 	.quad 21
0x358: 1600000000000000     | 	.quad 22
0x360: e9ffffffffffffff     | 	.quad -23
0x368: 1800000000000000     | 	.quad 24
0x370: 1900000000000000     | 	.quad 25
0x378: 1a00000000000000     | 	.quad 26
0x380: e5ffffffffffffff     | 	.quad -27
0x388: 1c00000000000000     | 	.quad 28
0x390: 1d00000000000000     | 	.quad 29
0x398: 1e00000000000000     | 	.quad 30
0x3a0: e1ffffffffffffff     | 	.quad -31
0x3a8: e0ffffffffffffff     | 	.quad -32
0x3b0: dfffffffffffffff     | 	.quad -33
0x3b8: deffffffffffffff     | 	.quad -34
0x3c0: 2300000000000000     | 	.quad 35
0x3c8: 2400000000000000     | 	.quad 36
0x3d0: 2500000000000000     | 	.quad 37
0x3d8: daffffffffffffff     | 	.quad -38
0x3e0: d9ffffffffffffff     | 	.quad -39
0x3e8: 2800000000000000     | 	.quad 40
0x3f0: d7ffffffffffffff     | 	.quad -41
0x3f8: 2a00000000000000     | 	.quad 42
0x400: 2b00000000000000     | 	.quad 43
0x408: d4ffffffffffffff     | 	.quad -44
0x410: d3ffffffffffffff     | 	.quad -45
0x418: d2ffffffffffffff     | 	.quad -46
0x420: 2f00000000000000     | 	.quad 47
0x428: d0ffffffffffffff     | 	.quad -48
0x430: 3100000000000000     | 	.quad 49
0x438: 3200000000000000     | 	.quad 50
0x440: cdffffffffffffff     | 	.quad -51
0x448: ccffffffffffffff     | 	.quad -52
0x450: 3500000000000000     | 	.quad 53
0x458: 3600000000000000     | 	.quad 54
0x460: c9ffffffffffffff     | 	.quad -55
0x468: c8ffffffffffffff     | 	.quad -56
0x470: 3900000000000000     | 	.quad 57
0x478: c6ffffffffffffff     | 	.quad -58
0x480: c5ffffffffffffff     | 	.quad -59
0x488: 3c00000000000000     | 	.quad 60
0x490: 3d00000000000000     | 	.quad 61
0x498: 3e00000000000000     | 	.quad 62
0x4a0: c1ffffffffffffff     | 	.quad -63
0x4a8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x4b0:                      | 	.align 16
0x4b0:                      | Predest:
0x4b0: fadebc0000000000     | 	.quad 0xbcdefa
0x4b8:                      | dest:
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0:                      | Postdest:
0x6b0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x6b8:                      | .align 8
                            | # Run time stack
0x6b8: 0000000000000000     | 	.quad 0
0x6c0: 0000000000000000     | 	.quad 0
0x6c8: 0000000000000000     | 	.quad 0
0x6d0: 0000000000000000     | 	.quad 0
0x6d8: 0000000000000000     | 	.quad 0
0x6e0: 0000000000000000     | 	.quad 0
0x6e8: 0000000000000000     | 	.quad 0
0x6f0: 0000000000000000     | 	.quad 0
0x6f8: 0000000000000000     | 	.quad 0
0x700: 0000000000000000     | 	.quad 0
0x708: 0000000000000000     | 	.quad 0
0x710: 0000000000000000     | 	.quad 0
0x718: 0000000000000000     | 	.quad 0
0x720: 0000000000000000     | 	.quad 0
0x728: 0000000000000000     | 	.quad 0
0x730: 0000000000000000     | 	.quad 0
                            | 
0x738:                      | Stack:
